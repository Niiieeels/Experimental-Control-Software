'<ADbasic Header, Headerversion 001.001>
' Process_Number                 = 5
' Initial_Processdelay           = 30000
' Eventsource                    = Timer
' Control_long_Delays_for_Stop   = No
' Priority                       = Low
' Priority_Low_Level             = 1
' Version                        = 1
' ADbasic_Version                = 6.2.0
' Optimize                       = Yes
' Optimize_Level                 = 1
' Stacksize                      = 1000
' Info_Last_Save                 = PF-MOT-03  PF-MOT-03\mot-user
'<Header End>
'The program Pro_DMO2 is a digital P controller.
'PAR_1 = setpoint
'PAR_2 = gain

' Required hardware:
'              - ADwin-Pro II
'              - module Pro II-AIn-x/x, set to module address 1
'              - module Pro II-AOut-x/x, set to module address 2
'              - controlled system getting a signal from output 1 at AOut-x/x and
'                returning a signal to input 1 of AIn-x/x
'               
'tn 19.04.2005 : modified for T11 and basic test on T11
'gc 01.08.2013 : modified for Pro II


#Include ADwinPro_All.Inc                         'Include file
#Define offset 32768                              '0V for 16 bit ADC/DAC-systems
#define setpoint Par_26
#define gain FPar_27


Function ADCDigits16(adc_volt, kv) As Long
  ADCDigits16 = (kv*adc_volt + 10)/(20.0/65536)
EndFunction


Rem cd: control deviation; av: actuating value
Dim cd, av As Long

INIT:
  'cycle-time of 0.1ms
  gain = 0.0003                                      'initial gain
  Processdelay = 1 * 3E5                          'cycle-time of 1ms
  FPar_54 = 0.15
  FPar_60 = 0.004
  'FPar_63 = 5
Event:
  Rem Read error signal for mirror distance of short cavity, generated by process 3
  cd = FPar_62                     'compute control deviation (cd)
  
  Rem only change update voltage of short or long cavity when the exact amount of edges
  Rem needed for calculation of the two error signals were detected.
  
  'FPar_7 = min_float(max_float((-1)*FPar_62 * gain+FPar_9, 0), 9.2)     'compute actuating value (av)  
  'if ((FPar_7 <= 1.1*FPar_9) and (FPar_7 >= 0.9*FPar_9)) then FPar_9 = FPar_7 
  If ((FPar_62 <= 0.1) and (FPar_62 >= -0.1)) then
    FPar_9 = min_float(max_float((-1)*FPar_62 * gain+FPar_9, 0), 9.2)     'compute actuating value (av)  
  endif
  
  'output error signal on DAC 5 of module 1, FPar_60 is a scaling factor and FPar_59 an offset
  ' this error signal determines the distance of mirrors of the 300 MHz Cavity
  if ((FPar_58>=0.005) or (FPar_58<=(-0.005))) then
    FPar_63 = min_float(max_float(FPar_58*FPar_60+FPar_63, 0), 10)
    p2_DAC(1, 5, ADCDigits16(FPar_63, 1))
  endif
 
  
  

