'<ADbasic Header, Headerversion 001.001>
' Process_Number                 = 4
' Initial_Processdelay           = 4000
' Eventsource                    = Timer
' Control_long_Delays_for_Stop   = No
' Priority                       = High
' Version                        = 1
' ADbasic_Version                = 6.2.0
' Optimize                       = No
' Stacksize                      = 1000
' Info_Last_Save                 = PF-KURZ  PF-KURZ\mot-user
'<Header End>
' The program Pro_DMO7.BAS is a waveform generator.
' Prior to starting the generator, the waveform can be 
' stored into Data_2[]. Alternatively a default 
' waveform can be internally generated by this program.
' The frequency does not have to be an integer value 
' and can be set very accurately. (e.g. 0.987 Hz
' is possible)
' This program intentionally has the process number 2.
' Therefore it can be executed simultaneously with the 
' programs ProII_DMO1.BAS or ProII_DMO3.BAS.
' 
'FPar_1    : frequency [Hz]
'Par_7     : amplitude (0 = 0 Volts, 32767 ~ 10 Volts)
'Par_8     : If = 0 Then a default waveform (sine wave) is generated internally
'            If = 1 Then the waveform has to be loaded by the application program

' Required hardware:
'              - ADwin-Pro II
'              - module Pro II-AOut-x/x, set to module address 1

'tn 19.4.2005 : modified for T11 and tested on T11
'gc 01.8.2013 : modified for Pro II


#Include ADwinPro_All.inc                         ' Include-file For Pro II system 

Function ADCDigits16(adc_volt, kv) As Long
  ADCDigits16 = (kv*adc_volt + 10)/(20.0/65536)
EndFunction

Dim Data_6[10001] As Float                        'waveform table
Dim count As Float
Dim i As Long
#Define PI 3.14159265
#define TTLStateProLight Par_8
#define OFFSET FPar_9
#define amplitude FPar_10

LOWINIT:          
     
  'cycle-time of 0.1ms
  ProcessDelay = 30000

  For i = 1 TO 8500
    Data_6[i] = i / 8500         ' generates a saw tooth
  Next i
  for i = 8501 to 10000
    Data_6[i] = 1.0 - (i-8500)/1500
  next i
  Data_6[10001] = Data_6[1]                     ' one additional element is necessary!
  
  count = 0
  p2_DAC(1, 1, 32768)                                ' 0 Volt output
  FPar_8 = 9
  FPar_10 = 0.8
  FPar_9 = 5

EVENT:
  count = count + FPar_8                          ' frequency is used for incrementing the array index
  
  If (count > 8500) then TTLStateProLight = TTLStateProLight or shift_left(1,5)
     
  If (count > 10000) Then 
    count = count - 10000
    TTLStateProLight = TTLStateProLight and not(shift_left(1,5))
  endif
  
  i = count + 1
    
  p2_DAC(1, 1, ADCDigits16(offset+ amplitude*Data_6[i],1))
  P2_Digout_Long(3, TTLStateProLight)
FINISH:
  p2_DAC(1, 1, 32768)                                ' 0 Volt output
